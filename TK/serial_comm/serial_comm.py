#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 20, 2018 12:25:08 PM

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import serial_comm_support
import serial.tools.list_ports
import serial

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global w, root
    root = Tk()
    serial_comm_support.set_Tk_var()
    top = SerialComm__dfso (root)
    serial_comm_support.init(root, top)
    root.mainloop()

w = None
def create_SerialComm__dfso(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, rt
    rt = root
    w = Toplevel (root)
    serial_comm_support.set_Tk_var()
    top = SerialComm__dfso (w)
    serial_comm_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_SerialComm__dfso():
    global w
    w.destroy()
    w = None


class SerialComm__dfso:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        self.style.theme_use("clam")
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("600x450")
        top.title("SerialComm @dfso")
        top.configure(highlightcolor="black")
        top.after(1000, self.ler_dados)
        
        self.Labelframe1 = LabelFrame(top)
        self.Labelframe1.place(relx=0.02, rely=0.02, relheight=0.21
                , relwidth=0.55)
        self.Labelframe1.configure(relief=GROOVE)
        self.Labelframe1.configure(text='''Conexão''')
        self.Labelframe1.configure(width=330)

        self.Label1 = Label(self.Labelframe1)
        self.Label1.place(relx=0.03, rely=0.21, height=18, width=35, y=-11)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(text='''Porta''')

        self.combobox_portas = ttk.Combobox(self.Labelframe1)
        self.combobox_portas.place(relx=0.42, rely=0.21, relheight=0.19
                , relwidth=0.54, y=-11, h=11)
        #self.combobox_portas.configure(textvariable=serial_comm_support.combobox)
        self.combobox_portas.configure(takefocus="")

        self.combobox_bauds = ttk.Combobox(self.Labelframe1)
        self.combobox_bauds.place(relx=0.42, rely=0.53, relheight=0.19
                , relwidth=0.54, y=-11, h=11)
        #self.combobox_bauds.configure(textvariable=serial_comm_support.combobox)
        self.combobox_bauds.configure(takefocus="")
        self.combobox_bauds['values'] = [9600, 115200]
        self.combobox_bauds.current(0)

        self.Label2 = Label(self.Labelframe1)
        self.Label2.place(relx=0.03, rely=0.53, height=18, width=66, y=-11)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(text='''Baud Rate''')

        self.Labelframe2 = LabelFrame(top)
        self.Labelframe2.place(relx=0.58, rely=0.02, relheight=0.21
                , relwidth=0.4)
        self.Labelframe2.configure(relief=GROOVE)
        self.Labelframe2.configure(text='''Ações''')
        self.Labelframe2.configure(width=240)

        self.btn_desconectar = Button(self.Labelframe2)
        self.btn_desconectar.place(relx=0.04, rely=0.53, height=26, width=101
                , y=-11)
        self.btn_desconectar.configure(activebackground="#d9d9d9")
        self.btn_desconectar.configure(text='''Desconectar''')

        self.btn_atualizar = Button(self.Labelframe2)
        self.btn_atualizar.place(relx=0.5, rely=0.21, height=54, width=104
                , y=-11)
        self.btn_atualizar.configure(activebackground="#d9d9d9")
        self._img1 = PhotoImage(file="./imgs/icons8-atualizações-disponíveis-40.png")
        self.btn_atualizar.configure(image=self._img1)

        self.btn_conectar = Button(self.Labelframe2)
        self.btn_conectar.place(relx=0.04, rely=0.21, height=26, width=100
                , y=-11)
        self.btn_conectar.configure(activebackground="#d9d9d9")
        self.btn_conectar.configure(text='''Conectar''')

        self.txt_log = Text(top)
        self.txt_log.place(relx=0.02, rely=0.27, relheight=0.65, relwidth=0.96)
        self.txt_log.configure(background="white")
        self.txt_log.configure(font="TkTextFont")
        self.txt_log.configure(selectbackground="#c4c4c4")
        self.txt_log.configure(undo="1")
        self.txt_log.configure(width=576)
        self.txt_log.configure(wrap=WORD)

        self.btn_sair = Button(top)
        self.btn_sair.place(relx=0.9, rely=0.93, height=26, width=49)
        self.btn_sair.configure(activebackground="#d9d9d9")
        self.btn_sair.configure(text='''Sair''')
        self.btn_sair.bind('<Button-1>',lambda e:serial_comm_support.btn_sair_clicked(e))

        self.btn_atualizar['command'] = self.obtem_portas
        self.btn_conectar['command'] = self.conectar

    def obtem_portas(self):
        
        portas = serial.tools.list_ports.comports()
        dispositivos = []
        for p in portas:
            print(p.device)
            self.combobox_portas['values'] = p.device
            dispositivos.append(p.device)
        self.combobox_portas['values'] = dispositivos
        self.combobox_portas.current(1)
    
    def conectar(self):
        self.arduino = serial.Serial(self.combobox_portas.get(),
            self.combobox_bauds.get())
        
        if self.arduino.is_open:
            print("Conectado a {}".format(self.arduino))
        
    def ler_dados(self):
        print("obtendo dados")
        #arduino = self.conectar()
        data = self.arduino.readline().decode()
        self.txt_log.insert(INSERT, data)
        print(data)





if __name__ == '__main__':
    vp_start_gui()



